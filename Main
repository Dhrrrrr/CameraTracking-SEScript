        IMyTextPanel textPanel;
        IMyProgrammableBlock DAGGER;


        OperationalControlStruct MainControls = new OperationalControlStruct();
        Vector3D targettingLocation;

        float azAngle = 0;
        float vertAngle = 0;

        bool inf = false;

        public Program()
        {
            IMyMotorStator startAzimuth = GridTerminalSystem.GetBlockWithName("Azimuth Rotor") as IMyMotorStator;
            IMyMotorStator startVertical = GridTerminalSystem.GetBlockWithName("Vertical Rotor") as IMyMotorStator;
            IMyCubeBlock relativeBlock = GridTerminalSystem.GetBlockWithName("Direction Block") as IMyCubeBlock;

            targettingLocation = Vector3D.Zero;

            if (startAzimuth != null && startVertical != null && relativeBlock != null)
            {
                MainControls.Initialise(startAzimuth, startVertical, relativeBlock);
            }
            else
            {
                Echo("Missing Blocks");
                return;
            }

            textPanel = GridTerminalSystem.GetBlockWithName("Text Panel") as IMyTextPanel;

            List<IMyProgrammableBlock> progBlock = new List<IMyProgrammableBlock>();
            GridTerminalSystem.GetBlocksOfType<IMyProgrammableBlock>(progBlock);

            foreach (var block in progBlock)
            {
                string[] splitString = block.CustomData.Split('|');

                if (splitString[0] == "DAGGER")
                {
                    DAGGER = block;
                    break;
                }
            }

            if (DAGGER == null)
            {
                Echo("Failed to locate targetting system");
                return;
            }

            Runtime.UpdateFrequency = UpdateFrequency.Update1;
        }

        public void Main(string argument, UpdateType updateSource)
        {
            ParseDAGGERInfo();
            CalculateAngles();

            switch (argument)
            {
                case "Switch":

                    if (MainControls.enabled)
                    {
                        MainControls.StopMovement();
                    }

                    MainControls.enabled = !MainControls.enabled;

                    break;

                default:
                    if (MainControls.enabled)
                    {
                        MainControls.SetSystemSpeed();
                    }
                    break;
            }

            WriteTextInfo();
        }

        private void WriteTextInfo()
        {
            textPanel.FontColor = Color.Blue;
            textPanel.WriteText(MainControls.azimuthRotation + "," + MainControls.verticalRotation + "," + MainControls.enabled + Environment.NewLine + targettingLocation + Environment.NewLine + "Az: " + azAngle + ", Ver: " + vertAngle);
        }

        private void CalculateAngles()
        {
            Vector3D forward = MainControls.direction.WorldMatrix.Forward;
            Vector3D left = MainControls.direction.WorldMatrix.Left;
            Vector3D down = MainControls.direction.WorldMatrix.Down;



            if (targettingLocation != null)
            {
                Vector3D direction = targettingLocation - MainControls.azimuth.WorldMatrix.Translation;

                Vector3D xzVec = ProjectVectorToPlane(forward, left, direction);
                Vector3D xyVec = ProjectVectorToPlane(forward, down, direction);

                Vector3D a = MainControls.vertical.WorldMatrix.Forward;

                float mainAzAngle = CalcAngleBetweenVec(a, forward);
                float mainVerAngle = CalcAngleBetweenVec(xyVec, forward);

                azAngle = mainAzAngle;
            }
        }

        public void ParseDAGGERInfo()
        {
            string[] DAGGERMainSplit = DAGGER.CustomData.Split('|');

            if (DAGGERMainSplit.Length == 2)
            {
                string[] DAGGERInfoSplit = DAGGERMainSplit[1].Split(',');

                try
                {
                    string[] splitString = DAGGERInfoSplit[0].Split(':');

                    if (splitString.Length == 4)
                    {
                        string[] secondarySplit1 = splitString[1].Split(' ');
                        string[] secondarySplit2 = splitString[2].Split(' ');
                        string[] secondarySplit3 = splitString[3].Split(' ');

                        double x = Convert.ToDouble(secondarySplit1[0]);
                        double y = Convert.ToDouble(secondarySplit2[0]);
                        double z = Convert.ToDouble(secondarySplit3[0]);

                        targettingLocation = new Vector3D(x, y, z);
                    }
                }
                catch (Exception)
                {
                    return;
                }
            }
        }

        public struct OperationalControlStruct
        {
            public IMyMotorStator azimuth;
            public IMyMotorStator vertical;
            public IMyCubeBlock direction;
            public bool enabled;

            public float azimuthRotation { get; set; }
            public float verticalRotation { get; set; }

            public void Initialise(IMyMotorStator azimuthIns, IMyMotorStator verticalIns, IMyCubeBlock directionalBlock)
            {
                azimuthRotation = 4;
                verticalRotation = 0;

                azimuth = azimuthIns;
                vertical = verticalIns;
                direction = directionalBlock;
                enabled = false;
            }
            public void SetSystemSpeed()
            {
                azimuth.TargetVelocityRPM = azimuthRotation;
                vertical.TargetVelocityRPM = verticalRotation;
            }

            public void StopMovement()
            {
                azimuthRotation = 0;
                verticalRotation = 0;

                SetSystemSpeed();
            }
        }

        public float CalcAngleBetweenVec(Vector3D a, Vector3D b)
        {
            return (float)MathHelper.ToDegrees(Math.Acos(MathHelper.Clamp(a.Dot(b) / Math.Sqrt(a.LengthSquared() * b.LengthSquared()), -1, 1)));
        }

        public Vector3D ProjectVectorToPlane(Vector3D x, Vector3D y, Vector3D projectedVector)
        {
            Vector3D xVec = Vector3D.ProjectOnVector(ref projectedVector, ref x);
            Vector3D yVec = Vector3D.ProjectOnVector(ref projectedVector, ref y);

            return xVec + yVec;
        }
